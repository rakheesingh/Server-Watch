{"version":3,"file":"static/js/563.b71d0a2b.chunk.js","mappings":"+IAAO,MAAMA,EAA8B,CACvCC,SAAU,kCACVC,YAAa,oCACbC,UAAW,2BACXC,QAAS,gCAGEC,EAAiC,CAC5CJ,SAAU,0DACVC,YAAa,0CACbC,UAAW,sCAGFG,EAAmB,CAC9BL,SAAU,CACRM,MAAO,GACPC,QAAS,4EAEXN,YAAa,CACXK,MAAO,GACPC,QAAS,+EAEXL,UAAW,CACTI,MAAO,GACPC,QAAS,0EAEXJ,QAAS,CACPG,MAAO,IACPC,QAAS,qF,kHCvBb,MAoCA,EApCoBC,IAMb,IANc,QACnBC,EAAO,MACPC,EAAK,YACLC,EAAW,SACXC,EAAQ,gBACRC,GACDL,EACC,MAAOM,EAAgBC,IAAqBC,EAAAA,EAAAA,UAAS,CAACN,MAAOG,EAAiBP,MAAOO,IAOrF,OACEI,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAAAF,SAAER,KACXS,EAAAA,EAAAA,KAACE,EAAAA,GAAM,CACLf,MAAOQ,EACPF,SAVgBU,IACpBP,EAAkBO,GACdV,GAAUA,EAASU,EAAShB,MAAM,EASlCG,QAASA,EACTE,YAAaA,MAEX,E,4FCaV,QA7BA,SAA2BH,GAAiC,IAAhC,YAAEe,EAAW,MAAEC,EAAK,MAAEC,GAAOjB,EACvD,OACEW,EAAAA,EAAAA,KAACO,EAAAA,EAAmB,CAACC,MAAM,OAAOC,OAAQ,IAAIV,UAC5CD,EAAAA,EAAAA,MAACY,EAAAA,EAAS,CAACC,KAAMP,EAAYL,SAAA,EAC3BC,EAAAA,EAAAA,KAACY,EAAAA,EAAa,CAACC,OAAO,UAAUC,gBAAgB,SAChDd,EAAAA,EAAAA,KAACe,EAAAA,EAAK,CACJC,QAASX,EACTY,KAAM,CAAEC,KAAM,UAAWC,SAAU,IACnCN,OAAO,aAETb,EAAAA,EAAAA,KAACoB,EAAAA,EAAK,CAACH,KAAM,CAAEC,KAAM,UAAWC,SAAU,IAAMN,OAAO,aACvDb,EAAAA,EAAAA,KAACqB,EAAAA,EAAO,KACRrB,EAAAA,EAAAA,KAACsB,EAAAA,EAAI,CACHC,KAAK,WACLP,QAASV,EACTO,OAAO,UACPW,MAAO,CAAEC,QAAS,UAK5B,ECVA,QCrBA,SAA0BC,GACxB,MAAMC,EAAmBtC,IAA6B,IAA5B,SAAEU,KAAa6B,GAAOvC,EAC9C,OACES,EAAAA,EAAAA,MAAA,OAAK+B,UAAU,WAAU9B,SAAA,CACtBA,GACDC,EAAAA,EAAAA,KAAC0B,EAAgB,IAAKE,MAClB,EAOV,OAFAD,EAAiBG,YAAc,WAMjC,SAAwBJ,GACtB,OAAOA,EAAiBI,aAAeJ,EAAiBK,MAAQ,WAClE,CAR4CC,CAAeN,MAElDC,CACT,CDOA,EAlBA,SAA+BtC,GAAuB,IAAtB,WAAC4C,EAAU,MAAE1C,GAAMF,EAC/C,OACIS,EAAAA,EAAAA,MAAA,OACA+B,UAAU,uFAAsF9B,SAAA,EAEhGC,EAAAA,EAAAA,KAACkC,EAAkB,CACjB9B,YAAa6B,EACb5B,MAAO,OACPC,MAAO,WAETN,EAAAA,EAAAA,KAACmC,EAAAA,GAAM,CAACC,UAAW,oBAAoBrC,SACpCR,MAKX,I,qBECA,QAlBA,SAAyBF,GAAoB,IAAnB,aAAEgD,GAAchD,EACxC,OACES,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OACE6B,UAAU,+EACV,kBAAiBQ,KAEnBrC,EAAAA,EAAAA,KAACqB,EAAAA,GAAO,CACNiB,MAAM,MACNf,KAAK,OACLgB,OAAO,QACPC,GAAIH,EACJI,QAASJ,MAIjB,ECsCA,QAhDA,WACE,MAAOK,EAAmBC,IAAuB9C,EAAAA,EAAAA,UAAS,KACpD,SAAE+C,EAAQ,SAAEC,IAAaC,EAAAA,EAAAA,YAAWC,EAAAA,GACpCC,GAAgBC,EAAAA,EAAAA,KAOtB,OALAC,EAAAA,EAAAA,YAAU,KACR,MAAMvC,ECdH,SAA4BiC,GACjC,OAAOF,EAAAA,EAAkBE,EAC3B,CDYiBO,CAAmBP,GAChCD,EAAoBhC,EAAK,GACxB,CAACiC,IAE6B,IAA7BF,EAAkBU,OAAqB,MAEzCtD,EAAAA,EAAAA,MAAA,OAAK+B,UAAU,sCAAqC9B,SAAA,EAClDD,EAAAA,EAAAA,MAAA,OAAK+B,UAAU,qCAAoC9B,SAAA,EACjDD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACqD,EAAAA,GAAM,CAAAtD,SAAC,gCACRC,EAAAA,EAAAA,KAACmC,EAAAA,GAAM,CAACC,UAAW,iBAAiBrC,SAAC,uCAIvCC,EAAAA,EAAAA,KAACsD,EAAW,CACV9D,YAAa,gBACbE,gBAAiBsD,EAAc,GAC/BvD,SAAWN,GAAU0D,EAAS,CAAEtB,KAAM,aAAcgC,QAASpE,IAC7DG,QAAS0D,EAAcQ,KAAKC,IAAM,CAChClE,MAAOkE,EACPtE,MAAOsE,YAIbzD,EAAAA,EAAAA,KAAA,OAAK6B,UAAU,6FAA4F9B,SACxG2D,OAAOC,QAAQjB,GAAmBc,KAAInE,IAAA,IAAAuE,EAAA,IAAEC,EAAK5B,GAAW5C,EAAA,OACvDS,EAAAA,EAAAA,MAACgE,EAAsB,CAErBvE,MAAOX,EAAAA,GAA4BiF,GACnC5B,WAAYA,EAAWlC,SAAA,CAEtBkC,EAAWA,EAAWmB,OAAS,GAAGjE,QACZ,QADiByE,EACtC1E,EAAAA,GAAiB2E,UAAI,IAAAD,OAAA,EAArBA,EAAuBzE,SACvBa,EAAAA,EAAAA,KAAC+D,EAAgB,CAAC1B,aAAcnD,EAAAA,GAAiB2E,GAAKzE,UACrD,MAPEyE,EAQkB,QAKnC,C","sources":["app/features/serverMetrics/Constant.js","app/designComponent/select/Select.jsx","app/designComponent/charts/LineChart.jsx","app/features/serverMetrics/components/LinearChartWithCaption.jsx","app/utils/higherOrderComponent/WithTopComponent.jsx","app/features/serverMetrics/components/WarningIndicator.jsx","app/features/serverMetrics/layouts/ServerMetricEach.jsx","app/features/serverMetrics/network.js"],"sourcesContent":["export const EachMetricsAndLegendMapping = {\n    cpuUsage: \"Track CPU Utilization Over Time\",\n    memoryUsage: \"Monitor Memory Consumption Trends\",\n    diskSpace: \"Analyze Disk Space Usage\",\n    latency: \"Monitor Server Response Time\"\n  };\n\n  export const MerticComaprisionLegendMapping = {\n    cpuUsage: \"Monitor CPU usage for better performance of your server\",\n    memoryUsage: \"Track memory usage to avoid bottlenecks\",\n    diskSpace: \"Check disk space to prevent issues\",\n}\n\nexport const ServerThresholds = {\n  cpuUsage: {\n    value: 75, // threshold value for CPU usage\n    tooltip: \"CPU usage above 75% indicates high load, which could affect performance.\"\n  },\n  memoryUsage: {\n    value: 80, // threshold value for Memory usage\n    tooltip: \"Memory usage above 80% means the server is running out of available memory.\"\n  },\n  diskSpace: {\n    value: 90, // threshold value for Disk usage\n    tooltip: \"Disk space above 90% means the server is running out of storage space.\"\n  },\n  latency: {\n    value: 200, // threshold value for Latency in ms\n    tooltip: \"Latency above 200ms could lead to delayed responses and degraded user experience.\"\n  }\n};\n","import React, { useState } from \"react\";\nimport Select from \"react-select\";\nimport { TextBase } from \"../typography/Typography\";\nimport PropTypes from \"prop-types\";\n\nconst ReactSelect = ({\n  options,\n  label,\n  placeholder,\n  onChange,\n  initialSelected,\n}) => {\n  const [selectedOption, setSelectedOption] = useState({label: initialSelected, value: initialSelected});\n\n  const handleChange = (selected) => {\n    setSelectedOption(selected);\n    if (onChange) onChange(selected.value);\n  };\n\n  return (\n    <div>\n      <TextBase>{label}</TextBase>\n      <Select\n        value={selectedOption}\n        onChange={handleChange}\n        options={options}\n        placeholder={placeholder}\n      />\n    </div>\n  );\n};\n\nReactSelect.propTypes = {\n  label: PropTypes.string,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func,\n  options: PropTypes.array,\n  initialSelected: PropTypes.string\n};\n\n\nexport default ReactSelect;\n","import React from \"react\";\nimport {\n  Tooltip,\n  ResponsiveContainer,\n  LineChart,\n  XAxis,\n  YAxis,\n  Line,\n  CartesianGrid,\n} from \"recharts\";\nimport PropTypes from \"prop-types\";\n\nfunction LineChartComponent({ metricsData, xAxis, yAxis }) {\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <LineChart data={metricsData}>\n        <CartesianGrid stroke=\"#E2E8F0\" strokeDasharray=\"5 5\" />\n        <XAxis\n          dataKey={xAxis}\n          tick={{ fill: \"#94A3B8\", fontSize: 12 }}\n          stroke=\"#E2E8F0\"\n        />\n        <YAxis tick={{ fill: \"#94A3B8\", fontSize: 12 }} stroke=\"#F5F5F5\" />\n        <Tooltip />\n        <Line\n          type=\"monotone\"\n          dataKey={yAxis}\n          stroke=\"#0280FF\"\n          style={{ opacity: 0.4 }}\n        />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}\n\nLineChartComponent.propTypes = {\n  metricsData: PropTypes.array.isRequired,\n  xAxis: PropTypes.string,\n  yAxis: PropTypes.string\n};\n\nexport default LineChartComponent;\n","import React from 'react'\nimport { TextSM } from '../../../designComponent/typography/Typography'\nimport LineChartComponent from '../../../designComponent/charts/LineChart'\nimport WithTopComponent from '../../../utils/higherOrderComponent/WithTopComponent'\n\nfunction LinearChartWithCaption({serverData, label}) {\n    return (\n        <div\n        className=\"bg-slate-50 shadow-sm rounded-sm flex flex-col justify-center items-center py-4 pr-4\"\n      >\n        <LineChartComponent\n          metricsData={serverData}\n          xAxis={\"time\"}\n          yAxis={\"value\"}\n        />\n        <TextSM textColor={\"text-brand-blue-1\"}>\n          {label}\n        </TextSM>\n      </div>\n        \n    )\n}\n\nexport default WithTopComponent(LinearChartWithCaption);\n","import React from \"react\";\n\nfunction WithTopComponent(WrappedComponent) {\n  const ComponentWithTop = ({ children, ...props }) => {\n    return (\n      <div className=\"relative\">\n        {children}\n        <WrappedComponent {...props} />\n      </div>\n    );\n  };\n\n  // Set the display name for easier debugging\n  ComponentWithTop.displayName = `WithTop(${getDisplayName(WrappedComponent)})`;\n\n  return ComponentWithTop;\n}\n\n// Helper function to get the display name of the wrapped component\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nexport default WithTopComponent;\n","import React from \"react\";\nimport { Tooltip } from \"react-tooltip\";\nimport \"../style.css\";\n\nfunction WarningIndicator({ toolTipLabel }) {\n  return (\n    <div>\n      <div\n        className=\"absolute -top-1 -left-1 w-3 h-3 bg-red-500 rounded-full animate-custom-pulse\"\n        data-tooltip-id={toolTipLabel}\n      ></div>\n      <Tooltip\n        place=\"top\"\n        type=\"dark\"\n        effect=\"solid\"\n        id={toolTipLabel}\n        content={toolTipLabel}\n      />\n    </div>\n  );\n}\n\nexport default WarningIndicator;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ServerContext } from \"../../../store/ServerDataContext\";\nimport { fetchServerMetrics } from \"../network\";\nimport { TextSM, TextXL } from \"../../../designComponent/typography/Typography\";\nimport ReactSelect from \"../../../designComponent/select/Select\";\nimport { getAllServerName } from \"../utils\";\nimport { EachMetricsAndLegendMapping, ServerThresholds } from \"../Constant\";\nimport LinearChartWithCaption from \"../components/LinearChartWithCaption\";\nimport WarningIndicator from \"../components/WarningIndicator\";\n\nfunction ServerMetricEach() {\n  const [serverMetricsData, setServerMetricData] = useState([]);\n  const { serverId, dispatch } = useContext(ServerContext);\n  const serverOptions = getAllServerName();\n\n  useEffect(() => {\n    const data = fetchServerMetrics(serverId);\n    setServerMetricData(data);\n  }, [serverId]);\n\n  if (serverMetricsData.length === 0) return null;\n  return (\n    <div className=\"w-full md:w-3/4 flex flex-col gap-3\">\n      <div className=\"flex justify-between items-center \">\n        <div>\n          <TextXL>Server Performance Metrics</TextXL>\n          <TextSM textColor={\"text-slate-500\"}>\n            Observe servers real time data\n          </TextSM>\n        </div>\n        <ReactSelect\n          placeholder={\"Select Server\"}\n          initialSelected={serverOptions[0]}\n          onChange={(value) => dispatch({ type: \"SET_SERVER\", payload: value })}\n          options={serverOptions.map((server) => ({\n            label: server,\n            value: server,\n          }))}\n        />\n      </div>\n      <div className=\"relative server-metrics-container p-6 border border-slate-200 flex flex-wrap gap-4 rounded\">\n        {Object.entries(serverMetricsData).map(([key, serverData]) => (\n          <LinearChartWithCaption\n            key={key}\n            label={EachMetricsAndLegendMapping[key]}\n            serverData={serverData}\n          >\n            {serverData[serverData.length - 1].value >=\n              ServerThresholds[key]?.value && (\n              <WarningIndicator toolTipLabel={ServerThresholds[key].tooltip} />\n            )}{\" \"}\n          </LinearChartWithCaption>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default ServerMetricEach;\n","import serverMetricsData from \"../../utils/apis/ServerMetricData\";\n\nexport function fetchServerMetrics(serverId) {\n  return serverMetricsData[serverId];\n}\n"],"names":["EachMetricsAndLegendMapping","cpuUsage","memoryUsage","diskSpace","latency","MerticComaprisionLegendMapping","ServerThresholds","value","tooltip","_ref","options","label","placeholder","onChange","initialSelected","selectedOption","setSelectedOption","useState","_jsxs","children","_jsx","TextBase","Select","selected","metricsData","xAxis","yAxis","ResponsiveContainer","width","height","LineChart","data","CartesianGrid","stroke","strokeDasharray","XAxis","dataKey","tick","fill","fontSize","YAxis","Tooltip","Line","type","style","opacity","WrappedComponent","ComponentWithTop","props","className","displayName","name","getDisplayName","serverData","LineChartComponent","TextSM","textColor","toolTipLabel","place","effect","id","content","serverMetricsData","setServerMetricData","serverId","dispatch","useContext","ServerContext","serverOptions","getAllServerName","useEffect","fetchServerMetrics","length","TextXL","ReactSelect","payload","map","server","Object","entries","_ServerThresholds$key","key","LinearChartWithCaption","WarningIndicator"],"sourceRoot":""}